cat >userY.txt <<EOF
     %echo Generating a basic OpenPGP key
     Key-Type: DSA
     Key-Length: 1024
     Subkey-Type: ELG-E
     Subkey-Length: 1024
     Name-Real: Joe Tester
     Name-Comment: with stupid passphrase
     Name-Email: joe@foo.bar
     Expire-Date: 0
     Passphrase: abc
     %pubring userY.pub
     %secring userY.sec
     # Do a commit here, so that we can later print "done" :-)
     %commit
     %echo done
EOF


gpg2 --batch --gen-key userY.txt

gpg2 --no-default-keyring --secret-keyring ./userY.sec \
       --keyring ./userY.pub --list-secret-keys


#   Expire-Date: 5d # days
#   Expire-Date: 5w # weeks
#   Expire-Date: 5m # mounths
#   Expire-Date: 5y # years
#   Expire-Date: iso-date           # yyyy mm dd 'T' hh mm ss
#   Expire-Date: 20000815T145012    # yyyymmddThhmmss

# Creation-Date: iso-date

#   %ask-passphrase
#   %no-ask-passphrase  # This option is a no-op for GnuPG 2.1 and later.

#   %no-protection  # Using this option allows the creation of keys without any passphrase protection. This option is mainly intended for regression tests.

#   Preferences: string
#       Set the cipher, hash, and compression preference values for this key. This expects the same type of string as the sub-command ‘setpref’ in the --edit-key menu.
# see:  gpg --version  # Was kann es:
#       gpg --list
#       gpg --edit-key Test1234
#       showpref

#   Preferences: setpref CAMELLIA256 TWOFISH AES256 SHA512 SHA384 SHA256 ZLIB BZIP2 ZIP Uncompressed

#	Key-Usage: sign
#	Subkey-Usage: encrypt

# apt-get install rng-tools
# rngd -r /dev/urandom -f -o /dev/random
# nano /etc/default/rng-tools
# add:
#	HRNGDEVICE=/dev/urandom
# /etc/init.d/rng-tools start


# Generate Key

name="Bot1"
mail="Bot1@gs-sys.de"
pw="password"
pubf="userX.pub"
secf="userX.sec"

cat >userX.txt <<EOF
     %echo Generating a basic OpenPGP key
     Key-Type: RSA
     Key-Length: 4096
	 Key-Usage: sign, auth
     Subkey-Type: RSA
     Subkey-Length: 4096
	 Subkey-Usage: encrypt
     Preferences: CAMELLIA256 TWOFISH AES256 SHA512 SHA384 SHA256 ZLIB BZIP2 ZIP Uncompressed
     Name-Real: $name
     Name-Comment: autogenerated
     Name-Email: $mail
     Expire-Date: 5y
     Passphrase: $pw
     %pubring $pubf
     %secring $secf
     # Do a commit here, so that we can later print "done" :-)
     %commit
     %echo done
EOF


gpg2 --batch --gen-key userX.txt

# END Generate Key


# Show keys (simulate import)
gpg -n --import ./userX.sec
gpg -n --import ./userX.pub


# Import
gpg2 --import ./userX.sec
gpg2 --import ./userX.pub



# Export
# öffentlichen Schlüssel
gpg --output schlüsseldatei --armor --export $name
# privaten Schlüssel
gpg --output schlüsseldatei --armor --export-secret-keys $name



--trust-model always

#gpg2 --no-default-keyring --secret-keyring ./userX.sec \
#       --keyring ./userX.pub --list-secret-keys

# check prefs with:		showpref
#   Preferences: addphoto /root/photo
#   Preferences: adduid
#   Preferences: addkey

exit

Versuche:


gpg --edit-key "Bot1" adduid "Test" quit

gpg --batch --yes --trust-level 5 --edit-key "swrepo server" trust quit


gpg2 -no-default-keyring --secret-keyring ./userX.sec --keyring ./userX.pub --list-secret-keys
gpg2 -no-default-keyring --secret-keyring ./userX.sec --keyring ./userX.pub --list-public-keys
gpg2 -no-default-keyring --secret-keyring ./userX.sec --keyring ./userX.pub --list-keys

gpg2 --secret-keyring ./userX.sec --keyring ./userX.pub --edit-key Bot1